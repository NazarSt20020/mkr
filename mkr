#include <iostream>
#include<ctime>
#include<math.h>

using namespace std;

class My
{
public:

    My(unsigned int size)
    {
        this->size = size;
        arr = new int[size];
    }

    unsigned int GetSize()
    {
        return size;
    }

    int* GetArr()
    {
        return arr;
    }

    void ArrRandom()
    {
        for (int i = 0; i < size; i++)
        {
            arr[i] = (rand() % 20) - 10;
        }
    }

    void viglArray()
    {
        cout << "Array info : " << endl;
        cout << "Size : " << this->size << endl;

        cout << "Array : " << ends;
        for (int i = 0; i < size; i++)
        {
            cout << arr[i] << " ";
        }
    }

    const My& operator+=(int value)
    {
        for (int i = 0; i < this->size; i++)
        {
            this->arr[i] += value;
        }

        return *this;
    }

    const My& operator-=(int value)
    {
        for (int i = 0; i < this->size; i++)
        {
            this->arr[i] -= value;
        }
        return *this;
    }

    const My& operator*=(int value)
    {
        for (int i = 0; i < this->size; i++)
        {
            this->arr[i] *= value;
        }
        return *this;
    }

    ~My()
    {
        delete[] arr;
    }
private:
    int* arr;
    unsigned int size;
};


My& TransformVector(My& funct);

int main()
{
    srand(time(NULL));
    const int arrSize = 10;

    My* testVec = new My(arrSize);
    testVec->ArrRandom();

    cout << "Original Array :" << endl;
    testVec->viglArray();

    cout << "\n\nOperator += test" << endl;
    *testVec += 5;
    testVec->viglArray();

    cout << "\n\nOperator -= test" << endl;
    *testVec -= 1;
    testVec->viglArray();

    cout << "\n\nOperator *= test" << endl;
    *testVec *= -1;
    testVec->viglArray();

    cout << "\n\nTransform Array Test (Task 10)" << endl;
    TransformVector(*testVec);
    testVec->viglArray();
}

My& TransformVector(My& funct)
{
    for (int i = 0; i < funct.GetSize(); i++)
    {
        if (funct.GetArr()[i] > 0 )
        {
            funct.GetArr()[i] =double pow(double funct.GetArr()[i],double 0.5);
        }
    }

    return funct;
}
